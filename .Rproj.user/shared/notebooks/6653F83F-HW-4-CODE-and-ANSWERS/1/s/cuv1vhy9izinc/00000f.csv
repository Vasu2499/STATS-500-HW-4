"0","library(sandwich)"
"0","#read in the data"
"0","dat = read.csv(""xy.csv"")"
"0","x = dat$x"
"0","y = dat$y"
"0","n = length(x)"
"0",""
"0","##############"
"0","#Population slope and intercept for simulations"
"0","############"
"0",""
"0","beta0 = 1"
"0","beta1 = 5"
"0",""
"0","##########"
"0","#Simulation for d-h"
"0","#########"
"0",""
"0","sigma.error = sqrt(.75)"
"0","SD.b1.skew = sigma.error/(sqrt(n-1)*sd(x))"
"0",""
"0","nsim = 10000"
"0","b1.skew = rep(0, nsim)"
"0","se.skew= rep(0, nsim)"
"0","se.skew.hc = rep(0, nsim)"
"0","Epsilon.skew = matrix(0, n, nsim)"
"0",""
"0","for(i in 1:nsim)"
"0","{"
"0","  errors = exp(rnorm(n, 0, sqrt(log(1.5)))) - exp(log(1.5)/2)"
"0","  Y = beta0 + beta1*x + errors"
"0","  lm.temp = lm(Y~x)"
"0","  b1.skew[i] = lm.temp$coef[2]"
"0","  se.skew[i] = summary(lm.temp)$coef[2,2]"
"0","  se.skew.hc[i] = sqrt(diag(vcovHC(lm.temp, type = ""HC2"")))[2]"
"0","  Epsilon.skew[,i] = errors"
"0","}"
"0",""
